# -*- coding: utf-8 -*-
"""Conta Bancária.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/edcostabh/03f69c9ee94ca05664f7b2a974e67462/conta-banc-ria.ipynb

# **PROGRAMA ORIENTADO A OBJETOS**

# *Caso Conta Bancária*

Foi criado uma classe para tratar Cliente, outra para Conta e uma última para registrar o histótico de transações.

Nota: Este é um código base para demonstrar com funciona as integrações entre as classes.
"""

## Classe Cliente, trata os dados de numero da conta, nome do titular da conta e o telefone.

class Cliente:
    def __init__(self, numero, cliente, telefone):
        self.numero = numero
        self.cliente = cliente
        self.telefone = telefone

## Vincula o cliente a uma conta e histórico de transações

class Conta:
    def __init__(self, numero, saldo, limite):
        self.numero = numero
        self.saldo = saldo
        self.limite = limite
        self.historico = Historico()

    ## Função DEPOSITA, retirar um valor predeterminado da conta e registra no histórico
    ## A variável 'x' é usada para determinar a quantidade de espaços entre a
    ## descrição e o valor sacado.
   
    def deposita(self, valor):
        x = len(self.numero) 
        self.saldo += valor
        self.historico.transacoes.append("DEPÓSITO"+(" "*(20-(5+x)))+"%.2f" % valor) 

    ## Função SACA, retirar um valor predeterminado da conta e registra no histórico
    ## A variável 'x' é usada para determinar a quantidade de espaços entre a
    ## descrição e o valor sacado.
    
    def saca(self, valor):
        x = len(self.numero) 
        self.saldo -= valor
        self.historico.transacoes.append("SAQUE"+(" "*(23-(5+x)))+"%.2f" % valor)

    ## função EXTRATO, gera o extrato com as transações, saldo,
    ## limite e valor disponível, e imprime "Saldo Insuficiente"
    ## se saldo estiver negativo.

    def extrato(self): 
        x = len(self.numero)
        print("Extrato CC No. ", self.numero)
        print("")
        self.historico.imprime()
        print("")
        print("Saldo:"+(" "*(24-(6+x)))+"%.2f" % self.saldo)
        print("")
        print("Limite:"+(" "*(24-(7+x)))+"%.2f" % self.limite)
        print("")
        print("Disponível:"+(" "*(24-(11+x)))+"%.2f" % (self.saldo + self.limite))
        if self.saldo < 0:
            print("\nSaldo Insuficiente!")

## Classe Historico registra todas as tranções e imprime o histórico.
class Historico:
    def __init__(self):
        self.transacoes = []

    def imprime(self):
        for t in self.transacoes:
            print("-", t)

"""# *Teste de inclusão de Cliente e Conta*"""

x_num = '123-4'  
x_cli = 'José Roberto'
x_tel = '1234-5678'
x_sal = 0.0
x_lim = 1000.0

cliente = Cliente(x_num, x_cli, x_tel)
conta = Conta(x_num, x_sal, x_lim)

"""# *Teste de movimentação da Conta*
Você pode realizar quantas movimentações quiser e depois executar a função de extrato para ver o resultado
"""

conta.deposita(5000.00)
conta.saca(6000.00)

"""# *Teste da Função Extrato*"""

conta.extrato()